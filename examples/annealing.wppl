// work in progress -- annealing doesn't actually help in current version

var isingLength = 10;
var nonMatchCost = Math.log(0.01);

var iterations = 3;
var stopAfterIter = iterations;

var getImportanceParams = function(prevVal){
  if (prevVal === undefined){
    return [.5];
  } else {
    return [prevVal ? .5 : .5];
  }
};

var model = function(){
  var xs = repeat(
    isingLength,
    function(){
      return isoImportanceSample(bernoulliERP, [0.5], getImportanceParams);
    });
  var score = sum(map2(
    function(x, y){
      return (x === y) ? 0 : nonMatchCost;
    },
    xs, xs.slice(1)));
  var alpha = globalStore.iso ? (iterations - globalStore.iter + 1) : 1;  // annealing parameter
  isoFactor(score / alpha);
  return sum(xs);
};

// console.log('\niso-enumerate:');
// var isoEnumerateERP = IsoEnumerate(model, { iters: iterations, stopAfterIter: stopAfterIter });
// printERP(isoEnumerateERP);

// console.log('\nenumerate:');
// var enumerateERP = Enumerate(model);
// printERP(enumerateERP);

console.log('\nSMC:');
var smcERP = ParticleFilterRejuv(model, 100, 100);
printERP(smcERP);

console.log('\nisoSMC:');
var isosmcERP = IsoSMC(model, {
  iters: iterations,
  numParticles: 100,
  rejuvSteps: 100,
  stopAfterIter: stopAfterIter
});
printERP(isosmcERP);
