var printERP = function(x) {
  var erpValues = sort(x.support(), undefined, function(v){return -x.score([], v);});
  map(
    function(v){
      var prob = Math.exp(x.score([], v));
      if (prob > 0.0){
        console.log(JSON.stringify(v) + ': ' + prob);
      }      
    },
    erpValues);
};

// Returns address relative to base address in global store
var getRelativeAddress = function(){
  var addr = getAddress();
  var base = globalStore['base_' + globalStore.iter];
  return relativizeAddress(base, addr);
};

// ERPs and factors are named by relative address and iter #.
// This allows them to refer to corresponding erps/factors in previous iters.
var name = function(relativeAddress, iter){
  return 'R' + (iter - 1) + relativeAddress;
};

// Score on previous level is heuristic, subtracted out on current level.
// We replace p=0 scores with p=epsilon (because we can't cancel p=0 later).
var isoFactor = function(score){
  if (!globalStore.iso){
    // Not running isoSMC - just treat as normal factor
    factor(score);
  } else {
    var relativeAddress = getRelativeAddress();
    var prevName = name(relativeAddress, globalStore.iter-1);
    var thisName = name(relativeAddress, globalStore.iter);
    var prevScore = globalStore[prevName] || 0;
    var thisScore = (((globalStore.iter < globalStore.iters) && (score === -Infinity)) ?
                     Math.log(globalStore.epsilon) :
                     score);
    globalStore[thisName] = thisScore;
    factor(thisScore - prevScore);
  }
};

// getParams is called with erp value on previous level (if any)
var isoSample = function(erp, params, getImportanceParams){
  if (!globalStore.iso){
    // Not running isoSMC - just treat as normal erp
    return sample(erp, params);
  } else {
    var relativeAddress = getRelativeAddress();
    var prevName = name(relativeAddress, globalStore.iter-1);
    var thisName = name(relativeAddress, globalStore.iter);
    var prevValue = globalStore[prevName] !== undefined ? globalStore[prevName] : undefined;
    var newERP = withImportanceParams(erp, getImportanceParams(prevValue));
    var thisValue = sample(newERP, params);
    globalStore[thisName] = thisValue;
    return thisValue;
  }
}

var IsoSMC = function(model, settings){
  globalStore.iso = true
  globalStore.iters = settings.iters;
  globalStore.epsilon = settings.epsilon || 0.0001;
  var loop = function(i, value){
    globalStore.iter = i;        
    if (i > settings.iters){
      return value;
    } else {
      // console.log('Iter ', i, '/', settings.iters);      
      globalStore['base_' + i] = getAddress();
      var value = model();
      return loop(i + 1, value);
    }
  };  
  var marginal = ParticleFilterRejuv(
    function(){return loop(1);},
    settings.numParticles,
    settings.rejuvSteps);
  globalStore.iso = false;
  globalStore.iters = undefined;
  globalStore.epsilon = undefined;
  return marginal;
};
